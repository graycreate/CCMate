name: CI

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  XCODE_VERSION: '16.3'
  MACOS_VERSION: '15'
  SCHEME: 'CCMate'
  PROJECT: 'CCMate.xcodeproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: |
        sudo xcode-select -p
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        xcodebuild -version
        swift --version
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: |
        xcodebuild build \
          -project "${{ env.PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration Debug \
          -destination "platform=macOS,arch=arm64" \
          -derivedDataPath build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES
          
    - name: Run Tests
      run: |
        xcodebuild test \
          -project "${{ env.PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration Debug \
          -destination "platform=macOS,arch=arm64" \
          -derivedDataPath build \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          | xcpretty --report junit --output build/reports/junit.xml
      continue-on-error: true
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/junit.xml
        
    - name: Generate Code Coverage
      run: |
        cd build/Build/ProfileData
        cd $(ls -d */Coverage.profdata | head -n 1 | cut -d'/' -f1)
        xcrun llvm-cov export \
          -format="lcov" \
          -instr-profile=Coverage.profdata \
          ../../Products/Debug/CCMate.app/Contents/MacOS/CCMate \
          > ../../coverage.lcov
          
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: build/Build/coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: SwiftLint
    runs-on: macos-15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: brew install swiftlint
      
    - name: Run SwiftLint
      run: swiftlint --reporter github-actions-logging
      continue-on-error: true

  build-release:
    name: Build Release
    runs-on: macos-15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Build Release
      run: |
        xcodebuild build \
          -project "${{ env.PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration Release \
          -destination "platform=macOS,arch=arm64" \
          -derivedDataPath build \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO
          
    - name: Create DMG
      run: |
        APP_PATH="build/Build/Products/Release/CCMate.app"
        DMG_PATH="build/CCMate-$(date +%Y%m%d).dmg"
        
        # Create a temporary directory for DMG contents
        mkdir -p build/dmg
        cp -R "$APP_PATH" build/dmg/
        
        # Create DMG
        hdiutil create -volname "CCMate" \
          -srcfolder build/dmg \
          -ov -format UDZO \
          "$DMG_PATH"
          
    - name: Upload Release Artifact
      uses: actions/upload-artifact@v4
      with:
        name: CCMate-Release
        path: build/*.dmg

  security-scan:
    name: Security Scan
    runs-on: macos-15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        # Check for hardcoded secrets
        if grep -r "PRIVATE KEY\|SECRET\|PASSWORD\|API_KEY" --exclude-dir=".git" . ; then
          echo "Potential secrets found!"
          exit 1
        fi
        
        # Check entitlements
        plutil -lint CCMate/CCMate.entitlements

  create-release:
    name: Create GitHub Release
    runs-on: macos-15
    needs: [build-and-test, build-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download Release Artifact
      uses: actions/download-artifact@v4
      with:
        name: CCMate-Release
        path: ./release
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./release/*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true