name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    name: Create Release
    runs-on: macos-15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.3.app
      
    - name: Update Version
      run: |
        # Update version in project
        VERSION="${{ inputs.version }}"
        
        # Update Info.plist version (if exists)
        if [ -f "CCMate/Info.plist" ]; then
          plutil -replace CFBundleShortVersionString -string "$VERSION" CCMate/Info.plist
          plutil -replace CFBundleVersion -string "$VERSION" CCMate/Info.plist
        fi
        
        # Update version in code if needed
        if grep -q "APP_VERSION" CCMate/*.swift; then
          sed -i '' "s/APP_VERSION = \".*\"/APP_VERSION = \"$VERSION\"/" CCMate/*.swift
        fi
        
    - name: Build Release
      run: |
        xcodebuild archive \
          -project "CCMate.xcodeproj" \
          -scheme "CCMate" \
          -configuration Release \
          -archivePath "build/CCMate.xcarchive" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
          
    - name: Export Archive
      run: |
        xcodebuild -exportArchive \
          -archivePath "build/CCMate.xcarchive" \
          -exportPath "build/export" \
          -exportOptionsPlist "scripts/export-options.plist" \
          || {
            # Fallback: copy app directly if export fails
            mkdir -p build/export
            cp -R "build/CCMate.xcarchive/Products/Applications/CCMate.app" "build/export/"
          }
          
    - name: Create DMG
      run: |
        VERSION="${{ inputs.version }}"
        APP_NAME="CCMate"
        DMG_NAME="${APP_NAME}-${VERSION}.dmg"
        
        # Create temporary directory for DMG
        mkdir -p build/dmg
        cp -R "build/export/${APP_NAME}.app" build/dmg/
        
        # Create Applications symlink
        ln -s /Applications build/dmg/Applications
        
        # Create DMG with nice settings
        hdiutil create -volname "${APP_NAME}" \
          -srcfolder build/dmg \
          -ov -format UDZO \
          -fs HFS+ \
          -imagekey zlib-level=9 \
          "build/${DMG_NAME}"
          
        echo "DMG_PATH=build/${DMG_NAME}" >> $GITHUB_ENV
        
    - name: Notarize DMG (Optional)
      if: false  # Enable when you have Apple Developer credentials
      run: |
        # xcrun notarytool submit "build/${DMG_NAME}" \
        #   --apple-id "${{ secrets.APPLE_ID }}" \
        #   --password "${{ secrets.APPLE_APP_PASSWORD }}" \
        #   --team-id "${{ secrets.APPLE_TEAM_ID }}" \
        #   --wait
        echo "Notarization skipped"
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        VERSION="${{ inputs.version }}"
        
        # Generate release notes from recent commits
        echo "## What's New in v${VERSION}" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since ${LAST_TAG}:" >> release_notes.md
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s" >> release_notes.md
        else
          echo "### Initial Release" >> release_notes.md
          echo "- First release of CCMate" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "1. Download the DMG file" >> release_notes.md
        echo "2. Open the DMG and drag CCMate to your Applications folder" >> release_notes.md
        echo "3. Launch CCMate from your Applications folder" >> release_notes.md
        echo "4. Grant necessary permissions when prompted" >> release_notes.md
        
    - name: Create Git Tag
      run: |
        VERSION="${{ inputs.version }}"
        git tag -a "v${VERSION}" -m "Release version ${VERSION}"
        git push origin "v${VERSION}"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version }}
        name: CCMate v${{ inputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ inputs.prerelease }}
        files: |
          build/*.dmg
          
    - name: Update Homebrew Formula (Optional)
      if: false  # Enable when you have a Homebrew tap
      run: |
        # Update your homebrew formula
        echo "Homebrew update skipped"